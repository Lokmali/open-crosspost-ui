/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutCrosspostImport } from './routes/_layout/_crosspost'
import { Route as LayoutCrosspostIndexImport } from './routes/_layout/_crosspost/index'
import { Route as LayoutCrosspostManageIndexImport } from './routes/_layout/_crosspost/manage/index'
import { Route as LayoutCrosspostLeaderboardIndexImport } from './routes/_layout/_crosspost/leaderboard/index'
import { Route as LayoutCrosspostEditorIndexImport } from './routes/_layout/_crosspost/editor/index'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutCrosspostRoute = LayoutCrosspostImport.update({
  id: '/_crosspost',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCrosspostIndexRoute = LayoutCrosspostIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutCrosspostRoute,
} as any)

const LayoutCrosspostManageIndexRoute = LayoutCrosspostManageIndexImport.update(
  {
    id: '/manage/',
    path: '/manage/',
    getParentRoute: () => LayoutCrosspostRoute,
  } as any,
)

const LayoutCrosspostLeaderboardIndexRoute =
  LayoutCrosspostLeaderboardIndexImport.update({
    id: '/leaderboard/',
    path: '/leaderboard/',
    getParentRoute: () => LayoutCrosspostRoute,
  } as any)

const LayoutCrosspostEditorIndexRoute = LayoutCrosspostEditorIndexImport.update(
  {
    id: '/editor/',
    path: '/editor/',
    getParentRoute: () => LayoutCrosspostRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_crosspost': {
      id: '/_layout/_crosspost'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutCrosspostImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_crosspost/': {
      id: '/_layout/_crosspost/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutCrosspostIndexImport
      parentRoute: typeof LayoutCrosspostImport
    }
    '/_layout/_crosspost/editor/': {
      id: '/_layout/_crosspost/editor/'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof LayoutCrosspostEditorIndexImport
      parentRoute: typeof LayoutCrosspostImport
    }
    '/_layout/_crosspost/leaderboard/': {
      id: '/_layout/_crosspost/leaderboard/'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LayoutCrosspostLeaderboardIndexImport
      parentRoute: typeof LayoutCrosspostImport
    }
    '/_layout/_crosspost/manage/': {
      id: '/_layout/_crosspost/manage/'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof LayoutCrosspostManageIndexImport
      parentRoute: typeof LayoutCrosspostImport
    }
  }
}

// Create and export the route tree

interface LayoutCrosspostRouteChildren {
  LayoutCrosspostIndexRoute: typeof LayoutCrosspostIndexRoute
  LayoutCrosspostEditorIndexRoute: typeof LayoutCrosspostEditorIndexRoute
  LayoutCrosspostLeaderboardIndexRoute: typeof LayoutCrosspostLeaderboardIndexRoute
  LayoutCrosspostManageIndexRoute: typeof LayoutCrosspostManageIndexRoute
}

const LayoutCrosspostRouteChildren: LayoutCrosspostRouteChildren = {
  LayoutCrosspostIndexRoute: LayoutCrosspostIndexRoute,
  LayoutCrosspostEditorIndexRoute: LayoutCrosspostEditorIndexRoute,
  LayoutCrosspostLeaderboardIndexRoute: LayoutCrosspostLeaderboardIndexRoute,
  LayoutCrosspostManageIndexRoute: LayoutCrosspostManageIndexRoute,
}

const LayoutCrosspostRouteWithChildren = LayoutCrosspostRoute._addFileChildren(
  LayoutCrosspostRouteChildren,
)

interface LayoutRouteChildren {
  LayoutCrosspostRoute: typeof LayoutCrosspostRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutCrosspostRoute: LayoutCrosspostRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutCrosspostRouteWithChildren
  '/': typeof LayoutCrosspostIndexRoute
  '/editor': typeof LayoutCrosspostEditorIndexRoute
  '/leaderboard': typeof LayoutCrosspostLeaderboardIndexRoute
  '/manage': typeof LayoutCrosspostManageIndexRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutCrosspostIndexRoute
  '/editor': typeof LayoutCrosspostEditorIndexRoute
  '/leaderboard': typeof LayoutCrosspostLeaderboardIndexRoute
  '/manage': typeof LayoutCrosspostManageIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/_crosspost': typeof LayoutCrosspostRouteWithChildren
  '/_layout/_crosspost/': typeof LayoutCrosspostIndexRoute
  '/_layout/_crosspost/editor/': typeof LayoutCrosspostEditorIndexRoute
  '/_layout/_crosspost/leaderboard/': typeof LayoutCrosspostLeaderboardIndexRoute
  '/_layout/_crosspost/manage/': typeof LayoutCrosspostManageIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/editor' | '/leaderboard' | '/manage'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/editor' | '/leaderboard' | '/manage'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/_crosspost'
    | '/_layout/_crosspost/'
    | '/_layout/_crosspost/editor/'
    | '/_layout/_crosspost/leaderboard/'
    | '/_layout/_crosspost/manage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_crosspost"
      ]
    },
    "/_layout/_crosspost": {
      "filePath": "_layout/_crosspost.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_crosspost/",
        "/_layout/_crosspost/editor/",
        "/_layout/_crosspost/leaderboard/",
        "/_layout/_crosspost/manage/"
      ]
    },
    "/_layout/_crosspost/": {
      "filePath": "_layout/_crosspost/index.tsx",
      "parent": "/_layout/_crosspost"
    },
    "/_layout/_crosspost/editor/": {
      "filePath": "_layout/_crosspost/editor/index.tsx",
      "parent": "/_layout/_crosspost"
    },
    "/_layout/_crosspost/leaderboard/": {
      "filePath": "_layout/_crosspost/leaderboard/index.tsx",
      "parent": "/_layout/_crosspost"
    },
    "/_layout/_crosspost/manage/": {
      "filePath": "_layout/_crosspost/manage/index.tsx",
      "parent": "/_layout/_crosspost"
    }
  }
}
ROUTE_MANIFEST_END */
